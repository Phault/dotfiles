# Check to see if we are currently running "as Administrator"
if (!(Verify-Elevated)) {
    $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    $newProcess.Verb = "runas";
    $actualProcess = [System.Diagnostics.Process]::Start($newProcess);
    $actualProcess.WaitForExit();
    exit
}

$deps = @(
    # dependencies
    "Microsoft.VCRedist.2010.x86",
    "Microsoft.VCRedist.2010.x64",
    "Microsoft.VCRedist.2012.x86",
    "Microsoft.VCRedist.2012.x64",
    "Microsoft.VCRedist.2015+.x86",
    "Microsoft.VCRedist.2015+.x64",
    "Microsoft.VCRedist.2013.x86",
    "Microsoft.VCRedist.2013.x64",
    @(, "Git.Git", "/VerySilent /NoRestart /Components=""icons,assoc,assoc_sh,gitlfs"""),

    # languages and framworks
    "Python.Python.3.12",
    "GoLang.Go",
    "GolangCI.golangci-lint"
    "Casey.Just",

    # apps
    "Mozilla.Firefox",
    "VivaldiTechnologies.Vivaldi",
    "eMClient.eMClient",
    "7zip.7zip",
    "Microsoft.PowerToys",
    "SomePythonThings.WingetUIStore",
    "junegunn.fzf",
    "Dystroy.broot",
    "jftuga.less",
    "Derailed.k9s",
    "BurntSushi.ripgrep.MSVC",
    "Microsoft.WindowsTerminal",
    "voidtools.Everything",
    "Bitwarden.Bitwarden",
    "Bitwarden.CLI",
    "Obsidian.Obsidian",
    "WinSCP.WinSCP",
    "Notepad++.Notepad++",
    "Starship.Starship",
    "TheDocumentFoundation.LibreOffice",
    "MuhammedKalkan.OpenLens",
    "jqlang.jq",
    "sharkdp.fd",
    "wez.wezterm",
    "HermannSchinagl.LinkShellExtension",

    # dev tools
    "Microsoft.PowerShell",
    "PuTTY.PuTTY",
    "SublimeHQ.SublimeMerge",
    "Microsoft.VisualStudioCode",
    "Neovim.Neovim",
    "Amazon.AWSCLI",
    "Insomnia.Insomnia",
    "Docker.DockerDesktop",
    "Canonical.Ubuntu.2204",
    "JesseDuffield.lazygit",
    "mvdan.shfmt",
    "koalaman.shellcheck",
    "JohnMacFarlane.Pandoc",
    "Helm.Helm",
    "Hashicorp.Terraform"
)

{{ if .personalMachine }}
# personal
$deps += @(
    "Discord.Discord",
    "Parsec.Parsec",
    "qBittorrent.qBittorrent",
    "Oracle.VirtualBox",
    "SyncTrayzor.SyncTrayzor",

    # dev
    "Microsoft.VisualStudio.2022.Community",

    # gaming
    "Valve.Steam",
    "EpicGames.EpicGamesLauncher",
    "ElectronicArts.EADesktop",
    "FlawlessWidescreen.FlawlessWidescreen",

    # utilities
    "REALiX.HWiNFO",
    "WinDirStat.WinDirStat",
    "HandBrake.HandBrake"
)
{{ else }}
# work
$deps += @(
    "Google.Chrome",
    "JetBrains.Rider",
    @(, "Microsoft.VisualStudio.2022.Professional", "--wait --quiet --norestart --nocache --addProductLang En-us --add Microsoft.VisualStudio.Workload.NetWeb"),
    "Microsoft.SQLServer.2022.Developer",
    @(, "Microsoft.SQLServerManagementStudio", "/ENU"),
    @(, "JetBrains.dotUltimate", "/SpecificProductNames=Rider;dotTrace;dotCover /Silent=True /VsVersion=17.0")
)
{{ end }}

$failedDeps = @()

foreach ($dep in $deps) {
    $id = If ($dep -is [array]) { $dep[0] } Else { $dep }

    if ($dep -is [array]) {
        $overrides = $dep[1]

        Write-Host "Installing $id with overrides: ""$overrides""..."
        winget install $id --silent --accept-package-agreements --accept-source-agreements --no-upgrade --override $overrides
    }
    else {
        Write-Host "Installing $id..."
        winget install $id --silent --accept-package-agreements --accept-source-agreements --no-upgrade
    }

    if (!$?) {
        $failedDeps += $id
    }
}

if ($failedDeps.Length -gt 0) {
    Write-Host "Some dependencies could not be installed: `r`n`t$($failedDeps -join "`r`n`t")."
}

function Install-Zig {
    Write-Host "Installing Zig.Zig..."
    # Zig does not like the silent flag
    winget install Zig.Zig 

    # even if the installer manages to get Zig in our path, it's currently bugged and can't find its lib folder
    # so we jump through some hoops to add it manually...
    $version = winget show Zig.Zig | Where-Object {$_ -match "Version" } | ForEach-Object { ($_ -split ": ")[1] }
    $installDir = "$env:LOCALAPPDATA\Microsoft\WinGet\Packages\zig.zig_Microsoft.Winget.Source_8wekyb3d8bbwe\zig-windows-x86_64-$version"

    $currentPath = Get-ItemPropertyValue "HKCU:\Environment" -Name Path
    if (-not ($installDir -in ($currentPath -split ";"))) {
        $newPath = -join ($installDir,";",$currentPath)
        Set-Environment Path $newPath
    }
}

Install-Zig

# scoop deps
scoop install mingw
scoop install lua
scoop install luarocks
scoop install fx
scoop install yazi
scoop install emacs
{{ if .personalMachine }}
{{ else }}
scoop install saml2aws
{{ end }}

irm https://moonrepo.dev/install/proto.ps1 | iex

Refresh-Environment

cd ~/.proto
proto use

proto install-global npm prettier
proto install-global npm stylelint
proto install-global npm dockerfile-language-server-nodejs

pip install grip

dotnet tool install -g csharpier

go install github.com/jessfraz/dockfmt@latest
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest

Refresh-Environment
